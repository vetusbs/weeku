buildscript {
    ext.kotlin_version = "1.3.21"
    ext.spring_boot_version = "2.1.3.RELEASE"
    ext.gradle_version_plugin_version = "0.20.0"
    ext.sonarqube_version = "2.7.0.1622"

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradle_version_plugin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqube_version"
    }
}

apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"
apply from: "$rootDir/buildsystem/dependencies.gradle"
apply from: "$rootDir/buildsystem/detekt.gradle"
apply from: "$rootDir/buildsystem/jacoco.gradle"

group "io.weeku"
version "1.0-SNAPSHOT"

sourceCompatibility = 1.8

repositories {
    jcenter()
}

compileKotlin {
    kotlinOptions.jvmTarget = 1.8
}

configurations {
    ktlint
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

dependencies {
    ktlint ktlint_checker

    compile kotlin_stdlib // Required for Kotlin integration
    compile spring_boot_starter_web
    compile spring_boot_starter_thymeleaf
    compile spring_boot_starter_actuator
    compile spring_boot_devtools

    compile jackson_kotlin
    compile concurrency_core
    compile concurrency_servlet

    testCompile spring_boot_starter_test
    testCompile jupiter
    testCompile jupiter_api
    testCompile mockito_kotlin
    testCompile hamcrest_library
    integrationTestCompile json_path
    integrationTestCompile rest_assured
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/kotlin')
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
    finalizedBy(jacocoTestReport)
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test
